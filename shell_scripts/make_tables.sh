#!/bin/sh
#export LD_LIBRARY_PATH=/usr/lib/oracle/12.1/client64/lib
sqlplus64 "awort/02081124@(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(Host=oracle.cs.ryerson.ca)(Port=1521))(CONNECT_DATA=(SID=orcl)))" <<EOF


-- Generated by Oracle SQL Developer Data Modeler 23.1.0.087.0806
--   at:        2023-09-27 23:26:56 EDT
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g



-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

CREATE TABLE clth_trans (
    clthng_itemnum                INTEGER NOT NULL,
    clthng_supplier_supplierid    INTEGER NOT NULL,
    clthng_supplier_manager_empid INTEGER NOT NULL,
    trnsct_ccnumber               INTEGER NOT NULL,
    trnsct_customer_customerid    INTEGER NOT NULL,
    trnsct_customer_worker_empid  INTEGER NOT NULL,
    receipt                       INTEGER
);

ALTER TABLE clth_trans
    ADD CONSTRAINT clothing_transaction_pk PRIMARY KEY ( clthng_itemnum,
                                                         clthng_supplier_supplierid,
                                                         clthng_supplier_manager_empid,
                                                         trnsct_ccnumber,
                                                         trnsct_customer_customerid,
                                                         trnsct_customer_worker_empid );

CREATE TABLE clthng (
    itemnum            INTEGER NOT NULL,
    supp_supplierid    INTEGER NOT NULL,
    supp_manager_empid INTEGER NOT NULL,
    price              NUMBER,
    quantity           INTEGER,
    design             VARCHAR2(40 CHAR)
);

ALTER TABLE clthng
    ADD CONSTRAINT clothing_pk PRIMARY KEY ( itemnum,
                                             supp_supplierid,
                                             supp_manager_empid );

CREATE TABLE cust (
    customerid INTEGER NOT NULL,
    wrkr_empid INTEGER NOT NULL,
    phonenum   VARCHAR2(40 CHAR),
    name       VARCHAR2(40 CHAR)
);

ALTER TABLE cust ADD CONSTRAINT customer_pk PRIMARY KEY ( customerid,
                                                          wrkr_empid );
CREATE TABLE emp (
    empid    INTEGER NOT NULL,
    username VARCHAR2(40 CHAR),
    password VARCHAR2(40 CHAR),
    type     VARCHAR2(20 CHAR)
);

ALTER TABLE emp ADD CONSTRAINT emp_pk PRIMARY KEY ( empid );

CREATE TABLE mngr (
    empid        INTEGER NOT NULL,
    mngr_empid   INTEGER NOT NULL,
    name         VARCHAR2(20 CHAR),
    salary       NUMBER,
    hoursperweek NUMBER
);

CREATE UNIQUE INDEX manager__idx ON
    mngr (
        mngr_empid
    ASC );

ALTER TABLE mngr ADD CONSTRAINT manager_pk PRIMARY KEY ( empid );

CREATE TABLE supp (
    supplierid   INTEGER NOT NULL,
    mngr_empid   INTEGER NOT NULL,
    suppliername VARCHAR2(40 CHAR),
    itemtype     VARCHAR2(40 CHAR)
);

ALTER TABLE supp ADD CONSTRAINT supplier_pk PRIMARY KEY ( supplierid,
                                                          mngr_empid );

CREATE TABLE trnsct (
    ccnumber          INTEGER NOT NULL,
    cust_customerid   INTEGER NOT NULL,
    cust_worker_empid INTEGER NOT NULL
);

ALTER TABLE trnsct
    ADD CONSTRAINT transaction_pk PRIMARY KEY ( ccnumber,
                                                cust_customerid,
                                                cust_worker_empid );

CREATE TABLE wrkr (
    empid        INTEGER NOT NULL,
    wrkr_empid   INTEGER NOT NULL,
    name         VARCHAR2(40 CHAR),
    wage         NUMBER,
    hoursperweek NUMBER
);

CREATE UNIQUE INDEX worker__idx ON
    wrkr (
        wrkr_empid
    ASC );
ALTER TABLE wrkr ADD CONSTRAINT worker_pk PRIMARY KEY ( empid );

ALTER TABLE clth_trans
    ADD CONSTRAINT clth_trans_clthng_fk FOREIGN KEY ( clthng_itemnum,
                                                      clthng_supplier_supplierid,
                                                      clthng_supplier_manager_empid )
        REFERENCES clthng ( itemnum,
                            supp_supplierid,
                            supp_manager_empid );

ALTER TABLE clth_trans
    ADD CONSTRAINT clth_trans_trnsct_fk FOREIGN KEY ( trnsct_ccnumber,
                                                      trnsct_customer_customerid,
                                                      trnsct_customer_worker_empid )
        REFERENCES trnsct ( ccnumber,
                            cust_customerid,
                            cust_worker_empid );

ALTER TABLE clthng
    ADD CONSTRAINT clthng_supp_fk FOREIGN KEY ( supp_supplierid,
                                                supp_manager_empid )
        REFERENCES supp ( supplierid,
                          mngr_empid );

ALTER TABLE cust
    ADD CONSTRAINT cust_wrkr_fk FOREIGN KEY ( wrkr_empid )
        REFERENCES wrkr ( empid );

ALTER TABLE mngr
    ADD CONSTRAINT manager_employee_fk FOREIGN KEY ( empid )
        REFERENCES emp ( empid );

ALTER TABLE mngr
    ADD CONSTRAINT mngr_mngr_fk FOREIGN KEY ( mngr_empid )
        REFERENCES mngr ( empid );

ALTER TABLE supp
    ADD CONSTRAINT supp_mngr_fk FOREIGN KEY ( mngr_empid )
        REFERENCES mngr ( empid );

ALTER TABLE trnsct
    ADD CONSTRAINT trnsct_cust_fk FOREIGN KEY ( cust_customerid,
                                                cust_worker_empid )
        REFERENCES cust ( customerid,
                          wrkr_empid );

ALTER TABLE wrkr
    ADD CONSTRAINT worker_employee_fk FOREIGN KEY ( empid )
        REFERENCES emp ( empid );

ALTER TABLE wrkr
    ADD CONSTRAINT wrkr_wrkr_fk FOREIGN KEY ( wrkr_empid )
        REFERENCES wrkr ( empid );

CREATE OR REPLACE TRIGGER arc_fkarc_1_wrkr BEFORE
    INSERT OR UPDATE OF empid ON wrkr
    FOR EACH ROW
DECLARE
    d VARCHAR2(20 CHAR);
BEGIN
    SELECT
        a.type
    INTO d
    FROM
        emp a
    WHERE
        a.empid = :new.empid;

    IF ( d IS NULL OR d <> 'WRKR' ) THEN
        raise_application_error(-20223, 'FK worker_employee_FK in Table WRKR violates Arc constraint on Ta>        );
    END IF;

EXCEPTION
    WHEN no_data_found THEN
        NULL;
    WHEN OTHERS THEN
        RAISE;
END;
/

CREATE OR REPLACE TRIGGER arc_fkarc_1_mngr BEFORE
    INSERT OR UPDATE OF empid ON mngr
    FOR EACH ROW
DECLARE
    d VARCHAR2(20 CHAR);
BEGIN
    SELECT
        a.type
    INTO d
    FROM
        emp a
    WHERE
        a.empid = :new.empid;

    IF ( d IS NULL OR d <> 'MNGR' ) THEN
        raise_application_error(-20223, 'FK manager_employee_FK in Table MNGR violates Arc constraint on T>        );
    END IF;

EXCEPTION
    WHEN no_data_found THEN
        NULL;
    WHEN OTHERS THEN
        RAISE;
END;
/

exit;
EOF
